<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
		
		<context:property-placeholder location="/WEB-INF/config/jdbc/jdbc.properties,
									            /WEB-INF/config/mail/mail.properties,
									            /WEB-INF/config/chatbot/application.properties"
											    ignore-unresolvable="true"/>
    
		<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		    <property name="host" value="smtp.gmail.com" />
		    <property name="port" value="587" />
		    <property name="username" value="${mail.username}" /> 
		    <property name="password" value="${mail.password}" />
		    <property name="javaMailProperties">
		        <props>
		            <prop key="mail.transport.protocol">smtp</prop>
		            <prop key="mail.smtp.auth">true</prop>
		            <prop key="mail.smtp.starttls.enable">true</prop> 
		            <prop key="mail.debug">true</prop>
		            <prop key="mail.smtp.ssl.trust">smtp.gmail.com</prop>
		            <prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
		            <prop key="mail.smtp.localhost">localhost</prop>
		        </props>
		    </property>
		</bean>

		
		<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
			<property name="driverClassName" value="${jdbc.driverClassName}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
		</bean>
		
		<bean id ="sqlSessionFactory" class= "org.mybatis.spring.SqlSessionFactoryBean" >
	    	<property name="dataSource" ref="dataSource" />
	  		<property name="configLocation" value="classpath:mybatis/models/modelConfig.xml"  />
	  		<property name="mapperLocations" value="classpath:mybatis/mappers/*.xml" />
	  		<property name="typeHandlersPackage" value="com.lookmarket.kb.mybatis"/>
		</bean >
		<mybatis-spring:scan base-package="com.lookmarket.chatbot.mapper"/>
		
		<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    		<constructor-arg ref="sqlSessionFactory" />
		</bean>

		<mybatis-spring:scan base-package="com.lookmarket.chatbot.dao" />

		<bean id ="transactionManager" class= "org.springframework.jdbc.datasource.DataSourceTransactionManager" >
	    	<property name ="dataSource" ref= "dataSource"></property >
		</bean>
		
		<!-- 타임아웃 설정 가능한 HttpClient 팩토리 -->
		<!--
		    기존:
		    <bean id="httpRequestFactory" class="org.springframework.http.client.HttpComponentsClientHttpRequestFactory">
		        <property name="connectTimeout" value="${openai.http.connect-timeout-ms:5000}"/>
		        <property name="readTimeout" value="${openai.http.read-timeout-ms:30000}"/>
		    </bean>
		
		    문제: HttpComponentsClientHttpRequestFactory는 Apache HttpClient5에 의존.
		         현재 POM에 httpclient5가 없어 ClassNotFoundException 발생.
		    해결: 외부 라이브러리 없이 동작하는 JDK 기반 팩토리(SimpleClientHttpRequestFactory)로 교체.
		-->
		<bean id="httpRequestFactory" class="org.springframework.http.client.SimpleClientHttpRequestFactory">
		    <!-- 주석: 밀리초 기준 타임아웃 -->
		    <property name="connectTimeout" value="${openai.http.connect-timeout-ms:5000}"/>
		    <property name="readTimeout" value="${openai.http.read-timeout-ms:30000}"/>
		</bean>
		
		<!-- OpenAI 외의 내부 API 등 호출 시 사용할 RestTemplate -->
		<bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
		    <constructor-arg ref="httpRequestFactory"/>
		</bean>
		
		<tx:annotation-driven/>
		
		<context:component-scan base-package="com.lookmarket,config">
		    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		</context:component-scan>

		
		<!-- @Configuration/@Bean 처리기 등록 (안전빵) -->
		<context:annotation-config/>
		
		<!-- OpenAI WebClient 자바 설정을 루트 컨텍스트에 강제 등록 -->
		<bean class="config.OpenAIConfig"/>
		
		<!-- ✅ 최소 WebClient 빈 (즉시 주입 가능) -->
		<bean id="openAIClientPlain"
		      class="org.springframework.web.reactive.function.client.WebClient"
		      factory-method="create">
		    <constructor-arg value="https://api.openai.com/v1"/>
		</bean>
		
		<aop:aspectj-autoproxy />
		

		

</beans>